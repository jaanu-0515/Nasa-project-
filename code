

IMPORTING_DATA

import pandas as pd

csv_path = r"C:\Users\HP\Downloads\train_FD001.csv"

df = pd.read_csv(csv_path, delim_whitespace=True, header=None, comment='#')

names = [
    'engine_id', 'cycle',
    'Altitude', 'Speed', 'Angle',
    'total_temp_at_fan_inlet',
    'total_temp_at_lpc_outlet',
    'total_temp_at_hpc_outlet',
    'total_temp_at_lpt_outlet',
    'pressure_at_fan_inlet',
    'total_pressure_in_bypass_duct',
    'total_pressure_at_hpc_outlet',
    'physical_fan_speed',
    'physical_core_speed',
    'engine_pressure_ratio',
    'static_pressure_at_hpc_outlet',
    'ratio_of_fuel_flow_to_Ps30',
    'corrected_fan_speed',
    'corrected_core_speed',
    'bypass_ratio',
    'burner_fuel_air_ratio',
    'bleed_enthalpy',
    'demanded_fan_speed',
    'demanded_corrected_fan_speed',
    'hpt_coolant_bleed',
    'lpt_coolant_bleed'
]


if df.shape[1] != len(names):
    print(f" Warning: file has {df.shape[1]} columns, expected {len(names)}.")
df.columns = names[:df.shape[1]]



#  Validate presence of essential columns
if 'engine_id' not in df.columns[:2] or 'cycle' not in df.columns[:2]:
    print("\n The first two columns are not 'engine_id' and 'cycle'. Let's inspect:")
    print(df.iloc[:, :3].head())
    raise ValueError(
        "The input file format might differ — check if first two columns represent engine ID and cycle number."
    )

# Compute Remaining Useful Life (RUL)
rul_by_engine = df.groupby('engine_id')['cycle'].max().reset_index()
rul_by_engine.columns = ['engine_id', 'max_cycle']
df = df.merge(rul_by_engine, on='engine_id', how='left')
df['RUL'] = df['max_cycle'] - df['cycle']
df.drop(columns=['max_cycle'], inplace=True)

# Check missing values
total_nulls = df.isnull().sum().sum()
print(f"\nTotal missing values: {int(total_nulls)}")

#  Save cleaned CSV
df.to_csv(csv_path, index=False)
print(f"\n Cleaned CSV saved to: {csv_path}")
print(df.head())




PREPROCESSING 



df.duplicated().sum()

df.isnull().sum()

from sklearn.preprocessing import MinMaxScaler
sensor_cols = [
    'total_temp_at_fan_inlet',
    'total_temp_at_lpc_outlet',
    'total_temp_at_hpc_outlet',
    'total_temp_at_lpt_outlet',
    'pressure_at_fan_inlet',
    'total_pressure_in_bypass_duct',
    'total_pressure_at_hpc_outlet',
    'physical_fan_speed',
    'physical_core_speed',
    'engine_pressure_ratio',
    'static_pressure_at_hpc_outlet',
    'ratio_of_fuel_flow_to_Ps30',
    'corrected_fan_speed',
    'corrected_core_speed',
    'bypass_ratio',
    'burner_fuel_air_ratio',
    'bleed_enthalpy',
    'demanded_fan_speed',
    'demanded_corrected_fan_speed',
    'hpt_coolant_bleed',
    'lpt_coolant_bleed'
]


scaler = MinMaxScaler(feature_range=(0, 1))


df[sensor_cols] = scaler.fit_transform(df[sensor_cols])


df.to_csv(r"C:\Users\HP\Downloads\train_FD001_scaled.csv", index=False)


print(df.head())


MODEL_SELECTION


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np



X = df[sensor_cols ]
y = df['RUL'] 

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=71
)


lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
y_pred_lr = lin_reg.predict(X_test)


rf_reg = RandomForestRegressor(
    n_estimators=200,
    random_state=42,
    n_jobs=-1
)
rf_reg.fit(X_train, y_train)
y_pred_rf = rf_reg.predict(X_test)

from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)


EVALUATION_METRICS

def evaluate_model(name, y_true, y_pred):
    mse=mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    print(f"{name} Results:")
    print(f"  RMSE: {rmse:.2f}")
    print(f"  R²:   {r2:.3f}")
    print("mse \n",mse)

evaluate_model("Linear Regression", y_test, y_pred_lr)
evaluate_model("Random Forest", y_test, y_pred_rf)
evaluate_model("Decision_Tree", y_test, y_pred_dt)

